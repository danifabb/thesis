# everything is the same but without batch 3

Sys.setenv(LANG = "en")

licor_1 <- read.csv("data/final_version_with_comment_1a - Copia.csv", sep = ";", header = TRUE, dec =",")

licor_1$treatment <- factor(licor_1$treatment) 

# A/Ci column 
licor_1$A.Ci <- licor_1$A/licor_1$Ci

# let's remove outliers
licor_2 <- subset(licor_1, licor_1$comment != "outlier")

#calculating average of the three values per leaf
library(dplyr)

licor_avg_1 <- licor_2%>%
  group_by(X, date, tree.id, batch, treatment, replicate, Y)%>%
  dplyr::summarise(avg.E_1=mean(E), avg.A_1=mean(A), avg.Ca_1=mean(Ca), avg.Ci_1=mean(Ci), avg.gsw_1=mean(gsw), avg.A.Ci_1=mean(A.Ci), avg.VPcham_1=mean(VPcham), avg.VPDleaf_1=mean(VPDleaf), avg.Q_1=mean(Q_out))%>%
  as.data.frame()

# calculating average of measurements for each tree on each day
licor_avg_2 <- licor_avg_1%>%
  group_by(Y, date, tree.id, batch, treatment)%>%
  dplyr::summarise(avg.E_2=mean(avg.E_1), avg.A_2=mean(avg.A_1), avg.Ca_2=mean(avg.Ca_1), avg.Ci_2=mean(avg.Ci_1), avg.gsw_2=mean(avg.gsw_1), avg.A.Ci_2=mean(avg.A.Ci_1), avg.VPcham_2=mean(avg.VPcham_1), avg.VPDleaf_2=mean(avg.VPDleaf_1), avg.Q_2=mean(avg.Q_1))%>%
  as.data.frame()

View(licor_avg_2)

licor_avg_2 <- subset(licor_avg_2, licor_avg_2$batch != "3")
View(licor_avg_2)

# GAS EXCHANGE ~ BATCH + TREATMENT
library(rcompanion)

# ANOVA (parametric test) - all significant

#E
aov_E.2 <- aov(log(licor_avg_2$avg.E_2) ~ licor_avg_2$batch + licor_avg_2$treatment)
summary(aov_E.2)
plot(aov_E.2) 

#gsw
aov_gsw.2 <- aov(log(licor_avg_2$avg.gsw_2) ~ licor_avg_2$batch + licor_avg_2$treatment)
summary(aov_gsw.2)
plot(aov_gsw.2)

#A/Ci
aov_A.Ci <- aov(licor_avg_2$avg.A.Ci_2 ~ licor_avg_2$batch + licor_avg_2$treatment)
summary(aov_A.Ci) 
par(mfrow=c(2,2))
plot(aov_A.Ci)

# alternative to ANOVA: Scheirer–Ray–Hare test (nonparametric test used for two-way factorial design) - all significant
#A
SRH_A <- scheirerRayHare(avg.A_2 ~ batch + treatment, data=licor_avg_2)
SRH_A

library(ggplot2)
SRH_A_plot <- ggplot(licor_avg_2,
                     aes(x=treatment,
                         y=avg.A_2))+
  geom_boxplot()+
  ggtitle("") +
  xlab("Treatment") + ylab("Assimilation") + theme_classic() # short description (median, quartiles) - R info

# batch faceting
SRH_A_plot_2 <- ggplot(licor_avg_2,
                       aes(x=treatment,
                           y=avg.A_2))+                   
  geom_boxplot()+
  ggtitle("")+
  xlab("Treatment") + ylab("Assimilation")+
  facet_wrap(~batch)+ theme_classic()

#E
SHR_E <- scheirerRayHare(avg.E_2 ~ batch + treatment, data=licor_avg_2)
SHR_E

SRH_E_plot <- ggplot(licor_avg_2,
                     aes(x=treatment,
                         y=avg.E_2))+
  geom_boxplot()+
  ggtitle("") +
  xlab("Treatment") + ylab("Evapotranspiration")+ theme_classic()

# batch faceting
SRH_E_plot_2 <- ggplot(licor_avg_2,
                       aes(x=treatment,
                           y=avg.E_2))+                   
  geom_boxplot()+
  ggtitle("")+
  xlab("Treatment") + ylab("Evapotranspiration")+
  facet_wrap(~batch)+ theme_classic()

#gsw
SHR_gsw <- scheirerRayHare(avg.gsw_2 ~ batch + treatment, data=licor_avg_2)
SHR_gsw

SRH_gsw_plot <- ggplot(licor_avg_2,
                       aes(x=treatment,
                           y=avg.gsw_2))+
  geom_boxplot()+
  ggtitle("") +
  xlab("Treatment") + ylab("Stomatal conductance")+ theme_classic()

# batch faceting
SRH_gsw_plot_2 <- ggplot(licor_avg_2,
                         aes(x=treatment,
                             y=avg.gsw_2))+                   
  geom_boxplot()+
  ggtitle("")+
  xlab("Treatment") + ylab("Stomatal conductance")+
  facet_wrap(~batch)+ theme_classic()

#A/Ci
SHR_A.Ci <- scheirerRayHare(avg.A.Ci_2 ~ batch + treatment, data=licor_avg_2)
SHR_A.Ci

SRH_A.Ci_plot <- ggplot(licor_avg_2,
                        aes(x=treatment,
                            y=avg.A.Ci_2))+
  geom_boxplot()+
  ggtitle("") +
  xlab("Treatment") + ylab("A/Ci")+ theme_classic()

# batch faceting
SRH_A.Ci_plot_2 <- ggplot(licor_avg_2,
                          aes(x=treatment,
                              y=avg.A.Ci_2))+                   
  geom_boxplot()+
  ggtitle("")+
  xlab("Treatment") + ylab("A/Ci")+
  facet_wrap(~batch)+ theme_classic()

#######################################################
# generalized linear model: we have to check distribution first

hist(licor_avg_2$avg.A_2, 
     breaks=12,
     main= "Histogram for Assimilation")

hist(licor_avg_2$avg.E_2,
     breaks=8,
     main= "Histogram for Evapotranspiration") #gamma distribution?

hist(licor_avg_2$avg.gsw_2,
     breaks=8,
     main= "Histogram for stomatal conductance") #gamma distribution?

hist(licor_avg_2$avg.A.Ci_2,
     breaks=12,
     main= "Histogram for A/Ci")


#SOIL TEMPERATURE
# days where we measured the temperature should match with days where we measured gas exchange values in the dataframe

temp <- read.table("data/CR1000X_Yann_XinCooling.dat", header=TRUE, sep=",", skip=3, na.strings = "NAN")

#removing days before and after measurements
temp_2 <- temp[-c(1:40418, 273468:306236), ]

colnames(temp_2) <- c('Date', 'N', 'Min', 'Smp', 'cool1', 'cool2', 'cool3', 'contr1', 'contr2')

#date separated from time
library(stringr)
temp_2[c('date', 'time')] <- str_split_fixed(temp_2$Date, ' ', 2)

#changing date format
temp_2$date <- as.Date(temp_2$date, format = "%Y-%m-%d")
temp_2$date <- format(temp_2$date, "%d/%m/%Y")

#calculating average for temperature values (each day)
temp_3 <- temp_2%>%
  group_by(date)%>%
  dplyr::summarise(Smp=mean(Smp), cool1=mean(cool1), cool2=mean(cool2), cool3=mean(cool3), contr1=mean(contr1), contr2=mean(contr2))%>%
  as.data.frame()

#order by date
temp_3 <- temp_3[order(as.Date(temp_3$date, format="%d/%m/%Y")), ]

#on 13/7 we measured 2 batches (batch 1 in the morning and 2 in the afternoon): we need 2 values of mean 
mean(temp[115163:118066,5])
mean(temp[115163:118066,6])
mean(temp[115163:118066,7])
mean(temp[115163:118066,8])
mean(temp[115163:118066,9])

mean(temp[118067:120922,5])
mean(temp[118067:120922,6])
mean(temp[118067:120922,7])
mean(temp[118067:120922,8])
mean(temp[118067:120922,9])

# keeping only the days during which we measured gas exchange
temp_4 <- temp_3[temp_3$date %in% c('30/06/2023', '03/07/2023', '04/07/2023', '10/07/2023', '13/07/2023', '19/07/2023', '21/07/2023', '25/07/2023', '28/07/2023', '01/08/2023', '04/08/2023', '07/08/2023', '09/08/2023', '10/08/2023'), ]
View(temp_4)

#new column for soil temperature, with mean values for each day and each tree
licor_avg_2$soil_temperature <- c(5.165599, 5.244229, 6.994229, 2.634512, 3.064366, 17.08293, 16.39777, 3.684478, 2.368306, 3.565989, 3.070011, 1.980472, 3.364987, 16.68514, 15.79022, 5.792202, 21.93107, 4.238358, 23.07499, 3.383498, 3.13424, 4.337276, 5.644117, 5.697607, 3.102319, 6.945484, 24.66709, 25.19100, 24.82654, 24.27996, 3.331607, 2.011076, 3.165969, 25.47543, 26.42160, 4.064173, 2.589215, 4.854806, 8.183644, 5.437522, 33.75890, 33.67237, 7.398282, 8.350280, 5.978569, 7.078955, 5.985372, 6.020313, 24.60876, 24.56076)
View(licor_avg_2)


# GAS EXCHANGE VS SOIL TEMPERATURE

# gamma distribution 

#A - significant
gammaA <- glm(formula = licor_avg_2$avg.A_2 ~ licor_avg_2$batch + licor_avg_2$soil_temperature, family = Gamma(), data = licor_avg_2)
summary(gammaA)
Q1 <- glm(avg.A_2 ~ batch + soil_temperature, family = Gamma, data=licor_avg_2)
EP <- resid(Q1, type = "pearson")
ED <- resid(Q1, type = "deviance")
mu <- predict(Q1, type = "response")
E <- licor_avg_2$avg.A_2 - mu
EP2 <- E / sqrt(0.235154 * mu) # 0.235154 is the overdispersion parameter taken from the summary (as explained in subsection 9.9 from Zuur 2009)
op <- par(mfrow = c(2, 2))
plot(x = mu, y = E, main = "Response residuals")
plot(x = mu, y = EP, main = "Pearson residuals")
plot(x = mu, y = EP2, main = "Pearson residuals scaled")
plot(x = mu, y = ED, main = "Deviance residuals")
par(op) # no pattern

#plot without cooled/ control distinction
gammaA_plot <- ggplot(licor_avg_2,
                      aes(x=soil_temperature,
                          y=avg.A_2))+
  geom_point(na.rm=T)+
  geom_smooth(method = "glm", se = F, method.args = list(family = "Gamma"))+
  ggtitle("Plot of CO2 assimilation by soil temperature") +
  xlab("Soil temperature") + ylab("Assimilation")+ theme_classic()


#plot with cooled/ control distinction
gammaA_plot_1 <- ggplot(licor_avg_2,
                        aes(x=soil_temperature,
                            y=avg.A_2,
                            color=treatment))+
  geom_point(na.rm=T)+
  geom_smooth(method = "glm", se = F, method.args = list(family = "Gamma"))+
  ggtitle("Plot of CO2 assimilation by soil temperature")+
  xlab("Soil temperature") + ylab("Assimilation")+ theme_classic()


#batch (gamma)
gammaA_batch <- ggplot(licor_avg_2,
                       aes(x=soil_temperature,
                           y=avg.A_2,
                           color=factor(batch)))+
  geom_point(na.rm=T)+
  geom_smooth(method = "glm", se = F, method.args = list(family = "Gamma"))+
  ggtitle("Plot of CO2 assimilation by soil temperature") +
  xlab("Soil temperature") + ylab("Assimilation")+ theme_classic()


#faceting for batch: with gam it is better than with lm
ggplot(licor_avg_2,
       aes(x=soil_temperature,
           y=avg.A_2))+
  geom_point(na.rm = T)+
  geom_smooth(method = "glm", se = F, method.args = list(family = "Gamma")) +
  facet_wrap(~batch)+ theme_classic()

final_plot_A <-ggplot(licor_avg_2, aes(x=soil_temperature)) + 
  geom_point(aes(y = avg.A_2, colour = factor(batch), shape = treatment),na.rm = T, se = FALSE) + 
  stat_smooth(aes(y = avg.A_2, colour = factor(batch)), method = "glm", se = F, method.args = list(family = "Gamma"))+
  scale_shape_discrete(breaks=c("control", "cooled"),labels=c("control trees", "cooled trees"))+
  labs(x = "Soil temperature", y = "Assimilation", shape = "Treatment", colour = "Batch")+
  scale_colour_viridis_d(
    name = waiver(),
    alpha = 1,
    begin = 0,
    end = 1,
    direction = 1,
    option = "D",
    aesthetics = "colour")+ theme_classic() # BC5 batch 3, try removing? change theme, confidence intervals?


install.packages("gridExtra")
library(gridExtra)
grid.arrange(gammaA_plot, gammaA_plot_1, nrow=1)

#E - significant
gammaE <- glm(formula = licor_avg_2$avg.E_2 ~ licor_avg_2$batch + licor_avg_2$soil_temperature, family = Gamma(), data = licor_avg_2)
summary(gammaE)
Q1 <- glm(avg.E_2 ~ batch + soil_temperature, family = Gamma, data=licor_avg_2)
EP <- resid(Q1, type = "pearson")
ED <- resid(Q1, type = "deviance")
mu <- predict(Q1, type = "response")
E <- licor_avg_2$avg.E_2 - mu
EP2 <- E / sqrt(0.4882097 * mu)
op <- par(mfrow = c(2, 2))
plot(x = mu, y = E, main = "Response residuals")
plot(x = mu, y = EP, main = "Pearson residuals")
plot(x = mu, y = EP2, main = "Pearson residuals scaled")
plot(x = mu, y = ED, main = "Deviance residuals")
par(op)

#trying gam
#mgcv
install.packages("mgcv")
library(mgcv)
gamE <- gam(licor_avg_2$avg.E_2 ~ s(licor_avg_2$soil_temperature, fx = FALSE, k=3, bs = "cr") + s(licor_avg_2$batch, fx = FALSE, k=3, bs = "cr"))
gamE2 <- gam(licor_avg_2$avg.E_2 ~ s(licor_avg_2$soil_temperature, k=3, bs = "cs") + s(licor_avg_2$batch, k=3, bs = "cs"))
summary(gamE2)

#1
op <- par(mfrow = c(2, 2))
plot(gamE2, add.smooth = FALSE)
par(op)

#2
drop1(gamE2, test = "F")
op <- par(mfrow = c(1, 2))
plot(resid(gamE2) ~ licor_avg_2$soil_temperature, xlab = "E", ylab = "Residuals")
plot(resid(gamE2) ~ licor_avg_2$avg.E_2,
     xlab = "E", ylab = "Residuals")
par(op)

# 3
gam.check(gamE2) # just 1 plot

install.packages("mgcViz")
library(mgcViz)
gamE2 <- getViz(gamE2)
check(gamE2) # 4 plots! pattern in 3rd plot; 4th should be a straight line: ok

#loess
library(gam)
loessE <- gam(licor_avg_2$avg.E_2 ~ lo(licor_avg_2$soil_temperature, span = 0.5) + lo(licor_avg_2$batch, span = 0.5))
summary(loessE)
plot(loessE, se = TRUE)
loessE <- predict(loessE, se=TRUE)
plot(licor_avg_2$soil_temperature, licor_avg_2$avg.E_2, type = "p")
I1 <- order(licor_avg_2$soil_temperature)
lines(licor_avg_2$soil_temperature[I1], loessE$fit[I1], lty = 1)
lines(licor_avg_2$soil_temperature[I1], loessE$fit[I1] + 2 * loessE$se[I1], lty = 2)
lines(licor_avg_2$soil_temperature[I1], loessE$fit[I1] - 2 * loessE$se[I1], lty = 2)
par(op)


#plot with loess
gamE_plot <- ggplot(licor_avg_2,
                    aes(x=soil_temperature,
                        y=avg.E_2,
                        color=treatment))+
  geom_point(na.rm=T)+
  geom_smooth(method = "loess",se=F,na.rm = T)+
  ggtitle("Plot of CO2 evapotranspiration by soil temperature") +
  xlab("Soil temperature") + ylab("Evapotranspiration")

#plot with mgcv
library(mgcv)

#without cooled/ control distinction
gamE_plot_1 <- ggplot(licor_avg_2,
                      aes(x=soil_temperature,
                          y=avg.E_2))+
  geom_point(na.rm=T)+
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), se=FALSE)+
  ggtitle("Plot of CO2 evapotranspiration by soil temperature") +
  xlab("Soil temperature") + ylab("Evapotranspiration")+ theme_classic()

# with distinction 
gamE_plot_2 <- ggplot(licor_avg_2,
                      aes(x=soil_temperature,
                          y=avg.E_2,
                          color=treatment))+
  geom_point(na.rm=T)+
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"))+
  ggtitle("Plot of CO2 evapotranspiration by soil temperature") +
  xlab("Soil temperature") + ylab("Evapotranspiration")+ theme_classic()

#batch
gamE_batch <- ggplot(licor_avg_2,
                     aes(x=soil_temperature,
                         y=avg.E_2,
                         color=factor(batch)))+
  geom_point(na.rm=T)+
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), se=FALSE)+
  ggtitle("Plot of CO2 evapotranspiration by soil temperature") +
  xlab("Soil temperature") + ylab("Evapotranspiration")+ theme_classic()

#faceting for batch
facet <- ggplot(licor_avg_2,
                aes(x=soil_temperature,
                    y=avg.E_2))+
  geom_point(na.rm = T)+
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), se=FALSE) +
  facet_wrap(~batch)+
  ggtitle("Plot of CO2 evapotranspiration by soil temperature") +
  xlab("Soil temperature") + ylab("Stomatal conductance")+ theme_classic()

# treatment + batch
gamE_plot_4 <- ggplot(licor_avg_2,
                      aes(x=soil_temperature,
                          y=avg.E_2,
                          color=factor(batch),
                          shape=treatment))+
  geom_point(na.rm=T)+
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs", k=5))+ theme_classic()

# this is better for treatment + batch
final_plot_E <-ggplot(licor_avg_2, aes(x=soil_temperature)) + 
  geom_point(aes(y = avg.E_2, colour = factor(batch), shape = treatment),na.rm = T ) + 
  stat_smooth(aes(y = avg.E_2, colour = factor(batch)), method = "gam", formula = y ~ s(x, bs = "cs"),na.rm = T, se = FALSE)+
  scale_shape_discrete(breaks=c("control", "cooled"),labels=c("control trees", "cooled trees"))+
  labs(x = "Soil temperature", y = "Evapotranspiration", shape = "Treatment", colour = "Batch")+
  scale_colour_viridis_d(
    name = waiver(),
    alpha = 1,
    begin = 0,
    end = 1,
    direction = 1,
    option = "D",
    aesthetics = "colour")+ theme_classic()


#gsw (conductance stomatal water) - significant
gammagsw <- glm(formula = licor_avg_2$avg.gsw_2 ~ licor_avg_2$batch + licor_avg_2$soil_temperature, family = Gamma(), data = licor_avg_2)
summary(gammagsw)
Q1 <- glm(avg.gsw_2 ~ batch + soil_temperature, family = Gamma, data=licor_avg_2)
EP <- resid(Q1, type = "pearson")
ED <- resid(Q1, type = "deviance")
mu <- predict(Q1, type = "response")
E <- licor_avg_2$avg.gsw_2 - mu
EP2 <- E / sqrt(0.5452099 * mu)
op <- par(mfrow = c(2, 2))
plot(x = mu, y = E, main = "Response residuals")
plot(x = mu, y = EP, main = "Pearson residuals")
plot(x = mu, y = EP2, main = "Pearson residuals scaled")
plot(x = mu, y = ED, main = "Deviance residuals")
par(op)

#trying gam
gamgsw <- gam(licor_avg_2$avg.gsw_2 ~ s(licor_avg_2$soil_temperature, fx = FALSE, k=-1, bs = "cr"))
gamgsw2 <- gam(licor_avg_2$avg.gsw_2 ~ s(licor_avg_2$soil_temperature, k=3, bs = "cs") + s(licor_avg_2$batch, k=3, bs = "cs"))
summary(gamgsw2)
gamgsw2 <- getViz(gamgsw2)
check(gamgsw2)


# plot with loess
gamgsw_plot <- ggplot(licor_avg_2,
                      aes(x=soil_temperature,
                          y=avg.gsw_2,
                          color=treatment))+
  geom_point(na.rm=T)+
  geom_smooth(method = "loess",se=F,na.rm = T)+
  ggtitle("Plot of stomatal conductance by soil temperature") +
  xlab("Soil temperature") + ylab("Stomatal conductance")

# plot with mgcv

#without cooled/ control distinction
gamgsw_plot_1 <- ggplot(licor_avg_2,
                        aes(x=soil_temperature,
                            y=avg.gsw_2))+
  geom_point(na.rm=T)+
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"))+
  ggtitle("Plot of stomatal conductance by soil temperature") +
  xlab("Soil temperature") + ylab("Stomatal conductance")+ theme_classic()

#with cooled/ control distinction
gamgsw_plot_2 <- ggplot(licor_avg_2,
                        aes(x=soil_temperature,
                            y=avg.gsw_2,
                            color=treatment))+
  geom_point(na.rm=T)+
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"))+
  ggtitle("Plot of stomatal conductance by soil temperature") +
  xlab("Soil temperature") + ylab("Stomatal conductance")+ theme_classic()

#batch
gamgsw_batch <- ggplot(licor_avg_2,
                       aes(x=soil_temperature,
                           y=avg.gsw_2,
                           color=factor(batch)))+
  geom_point(na.rm=T)+
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), se=FALSE)+
  ggtitle("Plot of stomatal conductance by soil temperature") +
  xlab("Soil temperature") + ylab("Stomatal conductance")+ theme_classic()

#faceting for batch
ggplot(licor_avg_2,
       aes(x=soil_temperature,
           y=avg.gsw_2))+
  geom_point(na.rm = T)+
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), se=FALSE) +
  facet_wrap(~batch)+ theme_classic()

# treatment + batch
gammagsw_plot_4 <- ggplot(licor_avg_2,
                          aes(x=soil_temperature,
                              y=avg.gsw_2,
                              color=treatment,
                              shape=factor(batch)))+
  geom_point(na.rm=T)+
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs", k=5))

final_plot_gsw <-ggplot(licor_avg_2, aes(x=soil_temperature)) + 
  geom_point(aes(y = avg.gsw_2, colour = factor(batch), shape = treatment),na.rm = T) + 
  stat_smooth(aes(y = avg.gsw_2, colour = factor(batch)), method = "gam", formula = y ~ s(x, bs = "cs"),na.rm = T, se = FALSE)+
  scale_shape_discrete(breaks=c("control", "cooled"),labels=c("control trees", "cooled trees"))+
  labs(x = "Soil temperature", y = "Stomatal conductance", shape = "Treatment", colour = "Batch")+
  scale_colour_viridis_d(
    name = waiver(),
    alpha = 1,
    begin = 0,
    end = 1,
    direction = 1,
    option = "D",
    aesthetics = "colour")+ theme_classic()

#A/Ci - significant
gammaA.Ci <- glm(formula = licor_avg_2$avg.A.Ci_2 ~ licor_avg_2$batch + licor_avg_2$soil_temperature, family = Gamma(), data = licor_avg_2)
summary(gammaA.Ci)
Q1 <- glm(avg.A.Ci_2 ~ batch + soil_temperature, family = Gamma, data=licor_avg_2)
EP <- resid(Q1, type = "pearson")
ED <- resid(Q1, type = "deviance")
mu <- predict(Q1, type = "response")
E <- licor_avg_2$avg.A.Ci_2 - mu
EP2 <- E / sqrt(0.1509008 * mu)
op <- par(mfrow = c(2, 2))
plot(x = mu, y = E, main = "Response residuals")
plot(x = mu, y = EP, main = "Pearson residuals")
plot(x = mu, y = EP2, main = "Pearson residuals scaled")
plot(x = mu, y = ED, main = "Deviance residuals")
par(op) 

final_plot_A.Ci <-ggplot(licor_avg_2, aes(x=soil_temperature)) + 
  geom_point(aes(y = avg.A.Ci_2, colour = factor(batch), shape = treatment),na.rm = T, se = FALSE) + 
  stat_smooth(aes(y = avg.A.Ci_2, colour = factor(batch)), method = "glm", se = F, method.args = list(family = "Gamma"), na.rm = T)+
  scale_shape_discrete(breaks=c("control", "cooled"),labels=c("control trees", "cooled trees"))+
  labs(x = "Soil temperature", y = "A/Ci", shape = "Treatment", colour = "Batch")+
  scale_colour_viridis_d(
    name = waiver(),
    alpha = 1,
    begin = 0,
    end = 1,
    direction = 1,
    option = "D",
    aesthetics = "colour")+ theme_classic()

### WATER POTENTIAL

w_pot <- read.csv("data/leafpsi_2023.csv", sep = ";", header = TRUE, dec =",")

#keeping only the days where we also measured water potential
licor_avg_3 <- licor_avg_2[licor_avg_2$date %in% c('04/07/2023','10/07/2023', '19/07/2023', '21/07/2023', '25/07/2023', '01/08/2023', '04/08/2023', '10/08/2023'), ] 

#cutting dates I don't need (all 12/07 + 25/07 for BQ5)
w_pot_2 <- w_pot[-c(11:15, 29), ] 
View(w_pot_2)

#adding column for water potential to licor data
licor_avg_3$water_potential <- c(13.06, 13.56, 11.58, 13.02, 10.07, 10.55, 9.03, 9.55, 11.03, 10.54, 6.55, 7.08, 7.53, 7.52, 8.05, 7.59, 8.55, 9.02, 8.52, 8.50, 10.05, 12.00, 9.03, 7.51, 7.55, 8.56, 9.05, 10.06, 10.03)
View(licor_avg_3)

# GAS EXCHANGE VS WATER POTENTIAL

# gamma distribution 

#A - significant
gammaA2 <- glm(licor_avg_3$avg.A_2 ~ licor_avg_3$batch + licor_avg_3$water_potential, data=licor_avg_3, family=Gamma())
summary(gammaA2)
QA2 <- glm(avg.A_2 ~ batch + water_potential, family = Gamma, data=licor_avg_3)
EP <- resid(QA2, type = "pearson")
ED <- resid(QA2, type = "deviance")
mu <- predict(QA2, type = "response")
E_ <- licor_avg_3$avg.A_2 - mu
EP2 <- E_ / sqrt(0.232866 * mu)  
op <- par(mfrow = c(2, 2))
plot(x = mu, y = E_, main = "Response residuals")
plot(x = mu, y = EP, main = "Pearson residuals")
plot(x = mu, y = EP2, main = "Pearson residuals scaled")
plot(x = mu, y = ED, main = "Deviance residuals")
par(op)

#plot
gammaA2_plot <- ggplot(licor_avg_3,
                       aes(x=water_potential,
                           y=avg.A_2))+
  geom_point()+
  geom_smooth(method = "glm", se = F, method.args = list(family = "Gamma"))+
  ggtitle("Plot of CO2 assimilation by water potential") +
  xlab("- Water potential") + ylab("Assimilation")+ theme_classic()


# batch 
gammaA_batch_2 <- ggplot(licor_avg_3,
                         aes(x=water_potential,
                             y=avg.A_2,
                             color=factor(batch)))+
  geom_point()+
  geom_smooth(method = "glm", se = F, method.args = list(family = "Gamma"))+
  ggtitle("Plot of CO2 assimilation by water potential") +
  xlab("- Water potential") + ylab("Assimilation")+theme_classic() 

# faceting batch
gamA_batch_2 <- ggplot(licor_avg_3,
                       aes(x=water_potential,
                           y=avg.A_2,
                           color=factor(batch)))+
  geom_point()+
  geom_smooth(method = "glm", se = F, method.args = list(family = "Gamma"))+
  facet_wrap(~batch)+
  scale_colour_viridis_d(
    name = waiver(),
    alpha = 1,
    begin = 0,
    end = 1,
    direction = 1,
    option = "D",
    aesthetics = "colour")+theme_classic() 

final_plot_A2 <-ggplot(licor_avg_3, aes(x=water_potential)) + 
  geom_point(aes(y = avg.A_2, colour = treatment, shape=factor(batch),na.rm = T)) + 
  stat_smooth(aes(y = avg.A_2, colour = treatment), method = "glm", se = F, method.args = list(family = "Gamma"))+
  scale_shape_discrete(breaks=c("1", "2", "4"),labels=c("1", "2", "4"))+
  labs(x = "- Water potential", y = "Assimilation", shape = "Batch", colour = "Treatment")+
  scale_colour_viridis_d(
    name = waiver(),
    alpha = 1,
    begin = 0,
    end = 1,
    direction = 1,
    option = "D",
    aesthetics = "colour")+theme_classic()  # plot cooled and control trees separately + merge batches? 2 lines: cooled and control + 4 shapes (batches)


#E - not significant
gammaE2 <- glm(licor_avg_3$avg.E_2 ~ licor_avg_3$batch + licor_avg_3$water_potential, data=licor_avg_3, family=Gamma())
summary(gammaE2)
QE2 <- glm(avg.E_2 ~ batch + water_potential, family = Gamma, data=licor_avg_3)
EP <- resid(QE2, type = "pearson")
ED <- resid(QE2, type = "deviance")
mu <- predict(QE2, type = "response")
E_ <- licor_avg_3$avg.E_2 - mu
EP2 <- E_ / sqrt(0.5483936 * mu)  
op <- par(mfrow = c(2, 2))
plot(x = mu, y = E_, main = "Response residuals")
plot(x = mu, y = EP, main = "Pearson residuals")
plot(x = mu, y = EP2, main = "Pearson residuals scaled")
plot(x = mu, y = ED, main = "Deviance residuals")
par(op)

# this is significant though
gamEw <- gam(licor_avg_3$avg.E_2 ~ s(licor_avg_3$water_potential, fx = FALSE, k=-1, bs = "cr"))
gamEw2 <- gam(licor_avg_3$avg.E_2 ~ s(licor_avg_3$batch, k=3, bs = "cs") + s(licor_avg_3$water_potential, k=3, bs = "cs"))
summary(gamEw2)
gamEw2 <- getViz(gamEw2)
check(gamEw2)

final_plot_E2 <-ggplot(licor_avg_3, aes(x=water_potential)) + 
  geom_point(aes(y = avg.E_2, colour = treatment, shape=factor(batch),na.rm = T)) + 
  stat_smooth(aes(y = avg.E_2, colour = treatment), method = "glm", se = F, method.args = list(family = "Gamma"))+
  scale_shape_discrete(breaks=c("1", "2", "4"),labels=c("1", "2", "4"))+
  labs(x = "- Water potential", y = "Evapotranspiration", shape = "Batch", colour = "Treatment")+
  scale_colour_viridis_d(
    name = waiver(),
    alpha = 1,
    begin = 0,
    end = 1,
    direction = 1,
    option = "D",
    aesthetics = "colour")+theme_classic()

#gsw - not significant
gammagsw2 <- glm(licor_avg_3$avg.gsw_2 ~ licor_avg_3$batch + licor_avg_3$water_potential, data=licor_avg_3, family=Gamma())
summary(gammagsw2)
Qgsw2 <- glm(avg.gsw_2 ~ batch + water_potential, family = Gamma, data=licor_avg_3)
EP <- resid(Qgsw2, type = "pearson")
ED <- resid(Qgsw2, type = "deviance")
mu <- predict(Qgsw2, type = "response")
E_ <- licor_avg_3$avg.gsw_2 - mu
EP2 <- E_ / sqrt(0.5992175 * mu)  
op <- par(mfrow = c(2, 2))
plot(x = mu, y = E_, main = "Response residuals")
plot(x = mu, y = EP, main = "Pearson residuals")
plot(x = mu, y = EP2, main = "Pearson residuals scaled")
plot(x = mu, y = ED, main = "Deviance residuals")
par(op)

# significant
gamgsww2 <- gam(licor_avg_3$avg.gsw_2 ~ s(licor_avg_3$water_potential, k=3, bs = "cs") + s(licor_avg_3$batch, k=3, bs = "cs"))
summary(gamgsww2)
gamgsww2 <- getViz(gamgsww2)
check(gamgsww2)


final_plot_gsw2 <-ggplot(licor_avg_3, aes(x=water_potential)) + 
  geom_point(aes(y = avg.gsw_2, colour = treatment, shape=factor(batch),na.rm = T)) + 
  stat_smooth(aes(y = avg.gsw_2, colour = treatment), method = "glm", se = F, method.args = list(family = "Gamma"))+
  scale_shape_discrete(breaks=c("1", "2", "4"),labels=c("1", "2", "4"))+
  labs(x = "- Water potential", y = "Stomatal conductance", shape = "Batch", colour = "Treatment")+
  scale_colour_viridis_d(
    name = waiver(),
    alpha = 1,
    begin = 0,
    end = 1,
    direction = 1,
    option = "D",
    aesthetics = "colour")+theme_classic()

#A/Ci - significant
gammaA.Ci2 <- glm(licor_avg_3$avg.A_2 ~ licor_avg_3$batch + licor_avg_3$water_potential, data=licor_avg_3, family=Gamma())
summary(gammaA.Ci2)
QA.Ci2 <- glm(avg.A.Ci_2 ~ batch + water_potential, family = Gamma, data=licor_avg_3)
EP <- resid(QA.Ci2, type = "pearson")
ED <- resid(QA.Ci2, type = "deviance")
mu <- predict(QA.Ci2, type = "response")
E_ <- licor_avg_3$avg.A.Ci_2 - mu
EP2 <- E_ / sqrt(0.232866 * mu)  
op <- par(mfrow = c(2, 2))
plot(x = mu, y = E_, main = "Response residuals")
plot(x = mu, y = EP, main = "Pearson residuals")
plot(x = mu, y = EP2, main = "Pearson residuals scaled")
plot(x = mu, y = ED, main = "Deviance residuals") # add units in brackets + relabel
par(op)

# graph doesn't really work
gammaA.Ci2_plot <- ggplot(licor_avg_3,
                          aes(x=water_potential,
                              y=avg.A.Ci_2))+
  geom_point()+
  geom_smooth(method = "glm", se = F, method.args = list(family = "Gamma"))+theme_classic()  

# with gam 
gamA.Ci2_plot <- ggplot(licor_avg_3,
                        aes(x=water_potential,
                            y=avg.A.Ci_2))+
  geom_point()+
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"))+
  ggtitle("Plot of CO2 assimilation by water potential") +
  xlab("- Water potential") + ylab("A/Ci")+theme_classic()

#batch
gamA.Ci_batch_3 <- ggplot(licor_avg_3,
                          aes(x=water_potential,
                              y=avg.A.Ci_2,
                              color=factor(batch)))+
  geom_point()+
  geom_smooth(method = "glm", se = F, method.args = list(family = "Gamma"))+
  facet_wrap(~batch)+
  ggtitle("Plot of CO2 assimilation by water potential") +
  xlab("- Water potential") + ylab("A/Ci")+
  scale_colour_viridis_d(
    name = waiver(),
    alpha = 1,
    begin = 0,
    end = 1,
    direction = 1,
    option = "D",
    aesthetics = "colour")+theme_classic()

final_plot_A.Ci2 <-ggplot(licor_avg_3, aes(x=water_potential)) + 
  geom_point(aes(y = avg.A.Ci_2, colour = treatment, shape=factor(batch),na.rm = T)) + 
  stat_smooth(aes(y = avg.A.Ci_2, colour = treatment), method = "glm", se = F, method.args = list(family = "Gamma"))+
  scale_shape_discrete(breaks=c("1", "2", "4"),labels=c("1", "2", "4"))+
  labs(x = "- Water potential", y = "A/Ci", shape = "Batch", colour = "Treatment")+
  scale_colour_viridis_d(
    name = waiver(),
    alpha = 1,
    begin = 0,
    end = 1,
    direction = 1,
    option = "D",
    aesthetics = "colour")+theme_classic()

### WATER POTENTIAL vs SOIL TEMPERATURE   
temp_5 <- temp_4[c(3,4,6:8, 10, 11, 14), ] # selecting only days we measured wat pot

# adding column to the water potential dataframe
w_pot_2$soil_temperature <- c(17.08293, 16.39777, 3.565989, 2.368306, 3.684478, 16.68514, 15.79022, 3.364987, 1.980472, 3.070011, 25.19100, 24.66709, 5.697607, 3.102319, 6.945484, 24.82654, 24.27996, 3.165969, 2.011076, 3.331607, 26.42160, 25.47543, 2.589215, 4.064173, 21.35902, 20.53549, 7.289648, 7.447564, 5.043627, 24.45840, 24.31986, 4.041999, 7.672780, 4.844551, 24.60876, 24.56076, 5.985372, 7.078955, 6.020313)
View(w_pot_2)

# distribution
hist(w_pot_2$psi_avg, 
     breaks=8,
     main= "Histogram for water potential")

# gamma distribution
gamma_wpot <- glm(w_pot_2$psi_avg ~ w_pot_2$soil_temperature, data=w_pot_2, family=Gamma())
summary(gamma_wpot) #not significant
Qw2 <- glm(w_pot_2$psi_avg ~ w_pot_2$soil_temperature, family = Gamma, data=w_pot_2)
EP <- resid(Qw2, type = "pearson")
ED <- resid(Qw2, type = "deviance")
mu <- predict(Qw2, type = "response")
E_ <- w_pot_2$psi_avg - mu
EP2 <- E_ / sqrt(0.05539687 * mu)  
op <- par(mfrow = c(2, 2))
plot(x = mu, y = E_, main = "Response residuals")
plot(x = mu, y = EP, main = "Pearson residuals")
plot(x = mu, y = EP2, main = "Pearson residuals scaled")
plot(x = mu, y = ED, main = "Deviance residuals")
par(op)






